Error Handling

먼저 다양한 '윈도우 함수'가 '에러'를 어떻게 '처리'하는에 대해 먼저 '이해'해야함.

VOID | 이 함수는 '절대' 실패하지 않고, 아주 적은 수의 윈도우 함수만이 VOID형의 반환 자료형을 가짐.

BOOL | 함수가 실패하면 0을 반환하고, 성공 시 0이 아닌 값을 반환함. '반환 값을 TRUE와 비교해선 안 된다.' 함수의 성공 여부를 확인하기 이해 FALSE인지 아닌지를 비교하는 것이 가장 좋은 방법!

HANLDLE | 함수가 실패하면 반환 값은 대개 NULL이며, 성공 시에는 유효한 오브젝트 hd(handle)을 반환한다. '몇몇 함수들은 -1로 정의된 INVALID_HANDLE_VALUE를 반환하는 경우가 있기 때문이 주의가 필요함.!'
		  플랫폼 SDK 문서에 함수 호출이 실패했을 때 NULL을 반환하지는지 혹은 INVALID_HANDLE_VALUE를 반환하는지에 대해 명확하게 기술되어 있으니 확인하자!.

PVOID | 함수가 실패하면 NULL을 반환한다. 성공 시에는 PVOID가 데이터를 저장하고 있느 '메모리 주소'를 가리킨다.

LONG/DWORD | 이러한 종류의 함수는 대게 LONG이나 DWORD형으로 개수를 반환한다. 개수를 반환하지 못하게 되면 0이나 -1를 반환한다. 
			 만일 호출하는 함수가 LONG/DWORD 값을 반환하는 경우라면 잠재적인 에러를 미연에 방지하기 위해 플랫폼 SDK 문서를 살펴보자!

윈도우 함수가 실패하게 되면 내부적으로 함수를 호출한 thread의 thread-local storage에 적절한 에러 코드를 저장해 둔다.

호출한 함수가 실패한 것으로 판단되면 어떤 에러가 발생했는지 확인하기 위해 GetLastError() 함수를 사용한다.
	이 함수는 가장 최근에 호출된 함수의 에러 코드를 스레드 지역 저장소로부터 가져오기 떄문에 다른 함수를 호출하기 전에 사용해야 한다. 
	왜냐하면 이 함수를 호출하기 전에 다른 함수를 호출하게 되면 다른 함수의 수행 결과가 겹쳐 써지게 되기때문이다.

visual studio내에 조사식 창을 통해 현재 수행 중인 스레드의 마지막 에러 코드와 메시지 텍스트를 확인할 수 있는 기능을 제공하고 있다.
	- 조사식 창에서 특정 행을 선택하고 $err,hr을 입력!

윈도우는 에러 코드를 메시지 텍스트로 변환해 주는 FormatMessage() 함수를 제공한다.
	- 이 함수의 유용성 중 하나는 이 함수가 다양한 언어로 문자열으 구성할 수 있다는 것이며, 함수는 언어 식별자를 인자로 받기 때문에 언어 식별자에 준하는 언어로 메시지 텍스트를 구성할 수 있다.

함수가 실패했음을 나타내기 위해서는 실패의 이유를 thread의 마지막 에러 코드로 설정하고 FALSE, INVALID_HANDLE_VALUE, NULL과 같은 값이나 적절한 값을 반환하도록 함수를 작성한다.
	- ex) VOID SetLastError (DWORD dwErrCode);

자신만의 에러 코드를 작성하려면 에러 코드 필드의 29번 비트의 값을 1로 설정해야 한다.

void Dlg_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) {

   switch (id) {

   case IDCANCEL:
      EndDialog(hwnd, id);
      break;

   case IDC_ALWAYSONTOP:
      SetWindowPos(hwnd, IsDlgButtonChecked(hwnd, IDC_ALWAYSONTOP) 
         ? HWND_TOPMOST : HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);
      break;

   case IDC_ERRORCODE: 
      EnableWindow(GetDlgItem(hwnd, IDOK), Edit_GetTextLength(hwndCtl) > 0);
      break;

   case IDOK:
      // 에러 코드 획득(1. 에디트 컨트롤로부터 에러코드를 숫자로 가져옴)
      DWORD dwError = GetDlgItemInt(hwnd, IDC_ERRORCODE, NULL, FALSE);

      HLOCAL hlocal = NULL;   // 에러 메시지 텍스트를 저장하기 위한 버퍼(2. 메모리 블럭을 가리킬 핸들을 NULL로 초기화)
      // FormatMessage (3. 함수는 내부적으로 필요한 메모리 블록을 직접 할당하고 이를 가리키는 핸들을 반환할 수 있다.)

      // 윈도우 메시지 문자열을 얻기 위해 기본 시스템 지역 설정을 사용.
      // 주의: 아래의 MAKELANGID는 0 값을 반환한다.
      DWORD systemLocale = MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL);

      // 에러 코드의 메시지 텍스트를 가져온다.
      BOOL fOk = FormatMessage(
         FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS |
         FORMAT_MESSAGE_ALLOCATE_BUFFER, 
         NULL, dwError, systemLocale, 
         (PTSTR) &hlocal, 0, NULL);
      /* FORMAT_MESSAGE_FROM_SYSTEM : ForMatMessage를 호출할 때 FORMAT_MESSAGE_FROM_SYSTEM 플래그를 전달할 수 있고,
       이 플래그는 운영체제가 정의하고 있는 에러 코드와 대응되는 메시지 텍스트를 얻고자 한다는 것을 알리는 역활.*/

      /* FORMAT_MESSAGE_ALLOCATE_BUFFER 플래그는 에러 메시지 텍스트를 저장할 수 있는 충분한 메모리 공간을 할당해 줄 것을 요청한다.
      할당된 메모리 블록을 가리키는 핸들은 hlocal 변수를 통해 반환된다.*/

      /* FORMAT_MESSAGE_IGNORE_INSERTS는 메시지 텍스트에 %로 시작하는 자리 표시자를 실질적인 값으로 변경하지 않을 것을 지정하는 플래그다.
      자리 표시자는 상황에 맞는 추가 정보를 제공하기 위해 주로 사용된다. 
      이 플래그를 인자로 전달하지 않으려면 자리 표시자에 나타날 정보를 Arguments 매개변수를 통해 전달해야 함.*/

      /*dwError는 에러 코드를 전달.*/

      /*systemLocale는 어떤 언어로 구성된 메시지 텍스트를 얻고자 하는지를 지정하는 언어 식별자를 전달하면 됨.
      언어 식별자는 두 가지 상수 값을 기반으로 구성되는데, 수행될 운영체제의 기본 언어 설정을 가져 오기 위해 0을 지정할 수도 있음.
      만약 어떤 언어의 운영체제가 설치되어 있는지를 미리 알 수 없다면 이 값을 특정 언어를 지정하도록 hard-coding 해서는 안된다.*/

   }
}
