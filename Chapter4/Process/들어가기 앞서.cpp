이번 장에서는 시스템이 수행 중인 애플리케이션을 어떻게 관리하는지 알아보자
	1. 프로세스란 무엇인지
	2. 프로세스를 관리하기 위해 필요한 프로세스 커널 오브젝트를 시스템이 어떻게 생성하는지
	3. 프로세스 커널 오브젝트를 이용하여 프로세스를 어떻게 사용하는지
	4. 프로세스의 다양한 속성과 특성에 대해 알아보고 속성을 알아내거나 변경하는 함수
	5. 시스템 내에서 추가적으로 프로세스를 생성하는 방법


	프로세스는 수행 중인 프로그램의 인스턴스라고 정의하며, 두 개의 컴포넌트로 구성된다.
		- 프로세스를 관리하기 위한 목적으로 운영체제가 사용하는 커널 오브젝트. 시스템은 프로세스에 대한 각종 통계 정보를 프로세스 커널 오브젝트에 저장하기도 한다.
		- 실행 모듈이나 DDL의 코드와 데이터를 수용하는 주소공간. 이러한 주소 공간은 스레드 스택이나 힙 할당과 같은 동적 메모리 할당에 사용되는 공간도 포함!
		
	프로세스는 자력으로 수행될 수 없다.
	프로세스가 무언가를 수행하기 위해서는 반드시 프로세스의 컨텍스트내에서 수행되는 스레드가 있어야 한다.
	스레드는 프로세스의 주소 공간 상에 위치하고 있는 코드를 수행할 책임이 있다.
	하나의 프로세스는 다수의 스레드를 가질 수 있으며, 이러한 스레드들은 프로세스 주소 공간 내에서 "동시에" 코드를 수행한다.
	각 스레드들은 자신만의 CPU 레지스터 집합과 스택을 가져야만 한다.
	프로세스는 프로세스 주소 공간 내의 코드를 수행하기 위해 적어도 한 개의 스래드를 가지고 있다.
	프로세스가 생성되면 시스템은 자동적으로 첫 번째 스레드를 생성해 주는데, 이를 주 스레드라고 부른다
	주 스레드는 추가적인 스레드를 생성할 수 있고, 이렇게 생성된 스레드들이 더욱더 많은 스레드를 만들어낼 수도 있다.
	프로세스의 주소 공간 내 코드를 수행할 스레드가 없다면 시스템은 자동적으로 프로세스와 프로세스 주소 공간을 파괴한다.

	모든 스레드가 동시에 수행될 수 있도록 하기 위해 운영체제는 cpu 시간을 조금씩 나눠준다.
	각 스레드들은 라운드 로빈 방식으로 주어지는 단위 시간만큼 수행될 수 있다.

	윈도우 운영체제에서는 스레드에 대한 모든 관리와 스케줄링을 윈도우 커널이 담당한다.
	 따라서 다수의 cpu를 가지고 있는 머신의 장점을 사용하기 위해 코드를 변경해야 할 필요는 없다.

	이 사실들을 기억하고 넘어가자!
	Writing your first Windows application로 <<